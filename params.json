{"name":"JSON ODM","tagline":"A JSON ODM (object document mapper) for JavaScript to use on the server or in the browser.","body":"JSON ODM by [Konsultaner](http://www.konsultaner.de), Richard Burkhardt\r\n========\r\n\r\nThis Project aims to be provide a json object document mapper.\r\n**Why would I need this?**\r\nThere are many cases where you do not want to have the server query your data. You may also see this mapper as a fancy way to filter your data or prepare a view model.\r\nThe original use case was an [ionic](http://ionicframework.com) app that was not interactive so providing a server backend was not needed, but structuring my data\r\ninto joinable collections seemed very helpful.\r\n\r\nRoad map\r\n----\r\n\r\n- Implement query methods from [mongo db](http://docs.mongodb.org/manual/reference/operator/query/)\r\n    - Comparison (~~$eq~~,~~$gt~~,~~$gte~~,~~$lt~~,~~$lte~~,~~$ne~~,~~$in~~,~~$nin~~) 100%\r\n    - Logical (~~$or~~,~~$and~~,$not,$nor) 50%\r\n    - Element (~~$exists~~,$type) 50% ($isNull needs renaming)\r\n    - Evaluation ($mod,$regex,$text,$where) 0%\r\n    - Geospatial ($geoWithin,$geoIntersects,$near,$nearSphere) 5%\r\n    - Array (~~$all~~,$elementMatch,$size) 33%\r\n    - Projection Operators ($,$elemMatch,$meta,$slice) 0%\r\n- Support Promise/A+ sources for the odm.addSource\r\n- Full ~~CR~~U~~D~~ support\r\n- Aggregation\r\n\r\nRequired NPM-Packages\r\n---------------------\r\n\r\nTo build it from source use command ```gulp``` and after adding:\r\n```bash\r\nnpm install --save-dev gulp\r\nnpm install --save-dev gulp-concat\r\nnpm install --save-dev gulp-filesize\r\nnpm install --save-dev gulp-jsdoc\r\nnpm install --save-dev gulp-uglify\r\nnpm install --save-dev jsdoc3-bootstrap\r\n```\r\n\r\nTo execute the benchmark use command ```gulp bench``` after adding:\r\n```bash\r\nnpm install --save-dev gulp-bench\r\n```\r\n\r\nExample\r\n------\r\n```javascript\r\n// initialize The mapper\r\nvar odm = new jsonOdm();\r\n// add a source to the mapper\r\nodm.addSource('people',{\r\n   \"Person\" : [\r\n       {\"id\":1,\"name\":\"Richi\",jobId:1,hobbyIds:[1,3,4]},\r\n       {\"id\":2,\"name\":\"Dave\",jobId:2,hobbyIds:[2,4]},\r\n       {\"id\":3,\"name\":\"Tom\",jobId:3,hobbyIds:[3,5]},\r\n       {\"id\":4,\"name\":\"Lisa\",jobId:4,hobbyIds:[1,2,3]},\r\n       {\"id\":5,\"name\":\"Hanni\",jobId:3,hobbyIds:[1,5]},\r\n       {\"id\":6,\"name\":\"Selma\",jobId:3,hobbyIds:[1,4]},\r\n       {\"id\":7,\"name\":\"Ralf\",jobId:1,hobbyIds:[4,3]}\r\n   ],\r\n   \"Jobs\" : [\r\n       {\"id\":1,\"name\":\"plumber\"},\r\n       {\"id\":2,\"name\":\"programmer\"},\r\n       {\"id\":3,\"name\":\"chef\"},\r\n       {\"id\":4,\"name\":\"hairdresser\"}\r\n   ],\r\n   \"Hobbies\" : [\r\n       {\"id\":1,\"name\":\"swimming\"},\r\n       {\"id\":2,\"name\":\"cycling\"},\r\n       {\"id\":3,\"name\":\"fishing\"},\r\n       {\"id\":4,\"name\":\"coding\"},\r\n       {\"id\":5,\"name\":\"dancing\"}\r\n   ]\r\n});\r\n// instantiate a collection object\r\nvar people = new jsonOdm.Collection('Person');\r\npeople.$hasOne(\"jobId\",\"id\",\"Jobs\",\"job\");\r\npeople.$hasMany(\"hobbyIds\",\"id\",\"Hobbies\",\"hobbies\");\r\n\r\nvar q = people.query();\r\n// get all hairdresser and plumber\r\nvar hairdresser = q.$or(\r\n   q.$branch(\"jobId\").$eq(1)\r\n   q.$branch(\"jobId\").$eq(4)\r\n).$all();\r\n\r\n// get all but hairdressers and plumbers\r\nvar hairdresser = q.$and(\r\n   q.$branch(\"jobId\").$ne(1)\r\n   q.$branch(\"jobId\").$ne(4)\r\n).$all();\r\n\r\n// delete all plumbers\r\nq.$branch(\"job\",\"name\").$eq(\"plumber\").$delete();\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}